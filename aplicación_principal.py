# -*- coding: utf-8 -*-
"""Aplicaci√≥n Principal

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cPz0MsHsSSw9ED_Ih6_-HihYEcTbZnFe
"""

import streamlit as st
import google.generativeai as genai
import pandas as pd
import plotly.graph_objects as go
from firebase_admin import firestore
from config import init_firebase
from datetime import datetime

# --- App Configuration ---
st.set_page_config(
    page_title="Base de Datos Viajes Isatour",
    page_icon="https://i.ibb.co/9v0Zz7N/ISATOUR-400-x-400-px-1.png",
    layout="wide",
)

# --- Firebase Connection ---
try:
    db = init_firebase()
except Exception as e:
    st.error(f"Error al conectar con Firebase: {e}. Aseg√∫rate de que tus credenciales en st.secrets son correctas.")
    st.stop()

# --- Gemini API Configuration ---
try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
    genai.configure(api_key=GOOGLE_API_KEY)
    model = genai.GenerativeModel('gemini-1.5-flash-latest')
except Exception:
    st.error("No se pudo configurar la API de Gemini. Por favor, a√±ade 'GOOGLE_API_KEY' a tus secretos de Streamlit (st.secrets).")
    st.stop()

# --- App State Management ---
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
if 'active_excursion_id' not in st.session_state:
    st.session_state.active_excursion_id = None
if 'is_read_only' not in st.session_state:
    st.session_state.is_read_only = False
if 'owner_user_id' not in st.session_state:
    st.session_state.owner_user_id = None

# --- Helper Functions ---
def format_currency(value):
    """Formats a number as Colombian currency."""
    return f"${value:,.0f} COP"

# --- Gemini API Call ---
def call_gemini_api(user_prompt, system_instruction=None):
    """Calls the Gemini API and returns the text response."""
    try:
        generation_config = genai.types.GenerationConfig(temperature=0.7)
        full_prompt = [f"System instruction: {system_instruction}\n\nUser prompt: {user_prompt}"] if system_instruction else [user_prompt]
        response = model.generate_content(full_prompt, generation_config=generation_config)
        return response.text
    except Exception as e:
        st.error(f"Error al llamar a la API de IA: {e}")
        return None

# --- Firestore Data Functions ---
APP_ID = "isatour-viajes-main-db" # Using a fixed App ID as in the original code

@st.cache_data(ttl=300)
def get_data(data_owner_id, collection_name, excursion_id=None, sub_collection=None, item_id=None, sub_sub_collection=None):
    """A generic function to fetch data from Firestore and cache it."""
    if not data_owner_id:
        return []

    base_path = f"artifacts/{APP_ID}/users/{data_owner_id}/{collection_name}"

    if excursion_id and sub_collection and item_id and sub_sub_collection:
        path = f"{base_path}/{excursion_id}/{sub_collection}/{item_id}/{sub_sub_collection}"
    elif excursion_id and sub_collection:
        path = f"{base_path}/{excursion_id}/{sub_collection}"
    else:
        path = base_path

    docs = db.collection(path).order_by("createdAt", direction=firestore.Query.DESC).stream()

    data = []
    for doc in docs:
        item = doc.to_dict()
        item['id'] = doc.id
        # Fetch payment details if it's a client or supplier
        if sub_collection in ['clientes', 'proveedores']:
            abonos_path = f"{path}/{doc.id}/abonos"
            abonos_docs = db.collection(abonos_path).stream()
            abonos = [a.to_dict() for a in abonos_docs]
            item['totalAbonado'] = sum(a.get('monto', 0) for a in abonos)
            item['abonos'] = abonos
        data.append(item)
    return data

# --- UI Sections ---

def render_login_page():
    """Displays the login form."""
    st.image("https://i.ibb.co/9v0Zz7N/ISATOUR-400-x-400-px-1.png", width=100)
    st.title("Bienvenido a Isatour")
    st.write("Ingresa las credenciales para acceder")

    with st.form("login_form"):
        user = st.text_input("Usuario", key="user")
        password = st.text_input("Contrase√±a", type="password", key="password")
        submitted = st.form_submit_button("Iniciar Sesi√≥n")

        if submitted:
            valid_user = st.secrets.get("APP_USER", "isatour")
            valid_password = st.secrets.get("APP_PASSWORD", "isatour1979*")
            if user.lower() == valid_user and password == valid_password:
                st.session_state.logged_in = True
                # In a real app, you would fetch the user's unique ID upon login
                st.session_state.owner_user_id = "default_user"
                st.rerun()
            else:
                st.error("Usuario o contrase√±a incorrectos.")

def render_excursiones_tab(db, user_id):
    """Renders the Excursion Management Tab."""
    excursiones = get_data(user_id, "excursiones")

    col1, col2 = st.columns([1, 2])

    with col1:
        if not st.session_state.is_read_only:
            with st.container(border=True):
                st.subheader("Nueva Excursi√≥n")
                with st.form("add_excursion_form", clear_on_submit=True):
                    name = st.text_input("Nombre del Viaje", placeholder="Ej: Viaje a Guatap√©")
                    description = st.text_area("Descripci√≥n / Itinerario", height=200, placeholder="Describe el plan del viaje...")

                    if st.form_submit_button("‚ú® Sugerir Itinerario con IA"):
                        if name:
                            with st.spinner("Generando itinerario..."):
                                prompt = f"""Act√∫a como un experto en turismo local para "Viajes Isatour", una agencia de Bello, Antioquia. Crea una propuesta de itinerario atractivo, detallado y conciso para una excursi√≥n de un d√≠a completo a "{name}". El formato debe ser f√°cil de leer. Incluye horarios sugeridos, actividades principales y una descripci√≥n emocionante. Usa vi√±etas."""
                                itinerary = call_gemini_api(prompt)
                                st.session_state.suggested_itinerary = itinerary
                        else:
                            st.warning("Por favor, introduce un nombre para el viaje.")

                    if 'suggested_itinerary' in st.session_state:
                         description = st.text_area("Descripci√≥n / Itinerario (Sugerido)", value=st.session_state.suggested_itinerary, height=200)
                         if st.button("Limpiar sugerencia"):
                             del st.session_state.suggested_itinerary
                             st.rerun()

                    cost = st.number_input("Valor Total por Persona (COP)", min_value=0, step=1000)

                    if st.form_submit_button("Crear Excursi√≥n", type="primary"):
                        if name and cost > 0:
                            excursion_data = {
                                "name": name,
                                "description": description,
                                "costPerPerson": cost,
                                "createdAt": firestore.SERVER_TIMESTAMP
                            }
                            db.collection(f"artifacts/{APP_ID}/users/{user_id}/excursiones").add(excursion_data)
                            st.success(f"¬°Excursi√≥n '{name}' creada!")
                            st.cache_data.clear() # Clear cache to show the new item
                        else:
                            st.error("Por favor, completa el nombre y el valor.")


    with col2:
        if not st.session_state.is_read_only:
             with st.container(border=True):
                st.subheader("üöÄ Asesor de Negocios IA")
                st.write("Obt√©n recomendaciones estrat√©gicas sobre tus excursiones para impulsar tu negocio.")
                if st.button("Obtener Recomendaci√≥n ‚ú®", disabled=not excursiones):
                    with st.spinner("La IA est√° analizando tu negocio..."):
                        excursion_list = "\n".join([f"- {e['name']} (Precio: {format_currency(e['costPerPerson'])})" for e in excursiones])
                        today = datetime.now().strftime('%A, %d de %B de %Y')
                        system_prompt = "Act√∫as como un asesor de negocios experto para 'Viajes Isatour', en Bello, Antioquia. Tu tono es motivador y estrat√©gico."
                        user_prompt = f"Hoy es {today}. Lista de excursiones activas:\n{excursion_list}\n\nBasado en esto y la fecha, dame 2-3 sugerencias pr√°cticas en vi√±etas sobre qu√© hacer HOY para impulsar ventas. Considera fechas importantes en Colombia."
                        advice = call_gemini_api(user_prompt, system_prompt)
                        st.info("Recomendaci√≥n del Asesor IA:")
                        st.markdown(advice)
                if not excursiones:
                    st.caption("Crea al menos una excursi√≥n para activar el asesor.")

        st.subheader("Excursiones Activas")
        if not excursiones:
            st.info("No hay excursiones creadas. ¬°A√±ade una para empezar!")
        else:
            for ex in excursiones:
                with st.container(border=True):
                    c1, c2 = st.columns([4,1])
                    c1.markdown(f"**{ex['name']}**\n\n*{format_currency(ex['costPerPerson'])} por persona*")
                    if not st.session_state.is_read_only:
                        if c2.button("üóëÔ∏è", key=f"del_ex_{ex['id']}", help="Eliminar excursi√≥n"):
                            db.collection(f"artifacts/{APP_ID}/users/{user_id}/excursiones").document(ex['id']).delete()
                            st.cache_data.clear()
                            st.rerun()

                    if ex.get('description'):
                        with st.expander("Ver descripci√≥n / itinerario"):
                            st.markdown(ex['description'])

                    if not st.session_state.is_read_only:
                        if st.button("Crear Publicaci√≥n para RRSS ‚ú®", key=f"social_{ex['id']}"):
                            with st.spinner("Creando publicaci√≥n..."):
                                 prompt = f"""Crea una publicaci√≥n para Instagram/Facebook para 'Viajes Isatour' sobre la excursi√≥n a "{ex['name']}". Descripci√≥n: "{ex['description']}". Incluye un t√≠tulo llamativo, emojis, un llamado a la acci√≥n y hashtags relevantes (#isatour, #{ex['name'].replace(' ','')}, #viajescolombia)."""
                                 post = call_gemini_api(prompt)
                                 st.text_area("Copia esta publicaci√≥n:", post, height=250, key=f"post_text_{ex['id']}")

def render_clientes_tab(db, user_id):
    """Renders the Client and Payments Tab."""
    excursiones = get_data(user_id, "excursiones")
    if not excursiones:
        st.warning("Primero debes crear una excursi√≥n en la pesta√±a 'Gestionar Excursiones'.")
        return

    excursion_options = {ex['id']: ex['name'] for ex in excursiones}
    selected_id = st.selectbox(
        "Selecciona una excursi√≥n para gestionar sus clientes:",
        options=list(excursion_options.keys()),
        format_func=lambda x: excursion_options[x],
    )
    st.session_state.active_excursion_id = selected_id

    if selected_id:
        selected_excursion = next((ex for ex in excursiones if ex['id'] == selected_id), None)
        clientes = get_data(user_id, "excursiones", excursion_id=selected_id, sub_collection="clientes")

        col1, col2 = st.columns([1, 2])

        with col1:
             if not st.session_state.is_read_only:
                with st.container(border=True):
                    st.subheader("A√±adir Nuevo Cliente")
                    with st.form("add_client_form", clear_on_submit=True):
                        client_name = st.text_input("Nombre Completo")
                        if st.form_submit_button("A√±adir Cliente", type="primary"):
                            if client_name:
                                client_data = {"name": client_name, "createdAt": firestore.SERVER_TIMESTAMP}
                                db.collection(f"artifacts/{APP_ID}/users/{user_id}/excursiones/{selected_id}/clientes").add(client_data)
                                st.success(f"Cliente '{client_name}' a√±adido.")
                                st.cache_data.clear()
                            else:
                                st.error("El nombre del cliente no puede estar vac√≠o.")

        with col2:
            st.subheader(f"Clientes para: {selected_excursion['name']}")
            if not clientes:
                st.info("No hay clientes en esta excursi√≥n. ¬°A√±ade el primero!")

            for cliente in clientes:
                 with st.container(border=True):
                    costo_total = selected_excursion['costPerPerson']
                    restante = costo_total - cliente['totalAbonado']
                    porcentaje = (cliente['totalAbonado'] / costo_total * 100) if costo_total > 0 else 0

                    c1, c2 = st.columns(2)
                    c1.markdown(f"**{cliente['name']}**")
                    status_text = "¬°Pagado!" if restante <= 0 else f"Resta: {format_currency(restante)}"
                    c2.markdown(f"*{status_text}*")

                    st.progress(int(porcentaje), text=f"{porcentaje:.0f}% Pagado")
                    st.caption(f"Abonado: {format_currency(cliente['totalAbonado'])} de {format_currency(costo_total)}")

                    with st.expander("Gestionar Abonos y Acciones"):
                        # Payment history
                        st.write("**Historial de Abonos:**")
                        if not cliente['abonos']:
                            st.caption("Sin abonos registrados.")
                        for abono in sorted(cliente['abonos'], key=lambda x: x.get('fecha'), reverse=True):
                            abono_date = abono.get('fecha').strftime('%Y-%m-%d') if abono.get('fecha') else 'N/A'
                            ac1, ac2 = st.columns(2)
                            ac1.write(f"- {format_currency(abono['monto'])} ({abono_date})")

                        if not st.session_state.is_read_only:
                            # Add payment form
                            with st.form(f"abono_form_{cliente['id']}", clear_on_submit=True):
                                monto = st.number_input("Monto del Abono", min_value=1, step=1000)
                                if st.form_submit_button("A√±adir Abono"):
                                    abono_data = {"monto": monto, "fecha": firestore.SERVER_TIMESTAMP}
                                    db.collection(f"artifacts/{APP_ID}/users/{user_id}/excursiones/{selected_id}/clientes/{cliente['id']}/abonos").add(abono_data)
                                    st.success("Abono a√±adido.")
                                    st.cache_data.clear()
                                    st.rerun()

                            st.divider()
                            # AI Reminder
                            if restante > 0:
                                if st.button("Generar Recordatorio de Pago ‚ú®", key=f"reminder_{cliente['id']}"):
                                    with st.spinner("Redactando mensaje..."):
                                        prompt = f"""Por favor, redacta un mensaje de recordatorio de pago para el cliente "{cliente['name']}". Debe pagar un saldo pendiente de {format_currency(restante)} para la excursi√≥n a "{selected_excursion['name']}". El tono debe ser muy amigable y servicial, para enviar por WhatsApp."""
                                        reminder = call_gemini_api(prompt, "Eres un gerente de una agencia de viajes en Colombia.")
                                        st.text_area("Mensaje de recordatorio:", reminder, height=200)

def render_proveedores_tab(db, user_id):
    """Renders the Suppliers and Costs Tab."""
    excursiones = get_data(user_id, "excursiones")
    if not excursiones:
        st.warning("Primero debes crear una excursi√≥n en la pesta√±a 'Gestionar Excursiones'.")
        return

    excursion_options = {ex['id']: ex['name'] for ex in excursiones}
    selected_id = st.selectbox(
        "Selecciona una excursi√≥n para gestionar sus proveedores:",
        options=list(excursion_options.keys()),
        format_func=lambda x: excursion_options[x],
        key="proveedor_select"
    )
    st.session_state.active_excursion_id = selected_id

    if selected_id:
        selected_excursion = next((ex for ex in excursiones if ex['id'] == selected_id), None)
        proveedores = get_data(user_id, "excursiones", excursion_id=selected_id, sub_collection="proveedores")

        col1, col2 = st.columns([1, 2])

        with col1:
             if not st.session_state.is_read_only:
                with st.container(border=True):
                    st.subheader("A√±adir Proveedor")
                    with st.form("add_proveedor_form", clear_on_submit=True):
                        nombre = st.text_input("Nombre del Proveedor")
                        categoria = st.selectbox("Categor√≠a", ["Buses", "Hoteles", "Alimentaci√≥n", "Entradas/Tickets", "Otro"])
                        valor_total = st.number_input("Valor Total del Contrato (COP)", min_value=0, step=10000)
                        if st.form_submit_button("A√±adir Proveedor", type="primary"):
                            if nombre and valor_total > 0:
                                data = {"nombre": nombre, "categoria": categoria, "valorTotal": valor_total, "createdAt": firestore.SERVER_TIMESTAMP}
                                db.collection(f"artifacts/{APP_ID}/users/{user_id}/excursiones/{selected_id}/proveedores").add(data)
                                st.success(f"Proveedor '{nombre}' a√±adido.")
                                st.cache_data.clear()
                            else:
                                st.error("Completa todos los campos.")

        with col2:
            st.subheader(f"Proveedores para: {selected_excursion['name']}")
            if not proveedores:
                st.info("No hay proveedores en esta excursi√≥n.")

            for p in proveedores:
                 with st.container(border=True):
                    restante = p['valorTotal'] - p['totalAbonado']
                    porcentaje = (p['totalAbonado'] / p['valorTotal'] * 100) if p['valorTotal'] > 0 else 0

                    c1, c2 = st.columns(2)
                    c1.markdown(f"**{p['nombre']}** ({p['categoria']})")
                    status_text = "¬°Pagado!" if restante <= 0 else f"Resta: {format_currency(restante)}"
                    c2.markdown(f"*{status_text}*")

                    st.progress(int(porcentaje), text=f"{porcentaje:.0f}% Pagado")
                    st.caption(f"Abonado: {format_currency(p['totalAbonado'])} de {format_currency(p['valorTotal'])}")

                    with st.expander("Gestionar Pagos"):
                        st.write("**Historial de Pagos:**")
                        if not p['abonos']:
                            st.caption("Sin pagos registrados.")
                        for abono in sorted(p['abonos'], key=lambda x: x.get('fecha'), reverse=True):
                             abono_date = abono.get('fecha').strftime('%Y-%m-%d') if abono.get('fecha') else 'N/A'
                             st.write(f"- {format_currency(abono['monto'])} ({abono_date})")

                        if not st.session_state.is_read_only:
                            with st.form(f"abono_prov_form_{p['id']}", clear_on_submit=True):
                                monto = st.number_input("Monto del Pago", min_value=1, step=1000)
                                if st.form_submit_button("A√±adir Pago"):
                                    abono_data = {"monto": monto, "fecha": firestore.SERVER_TIMESTAMP}
                                    db.collection(f"artifacts/{APP_ID}/users/{user_id}/excursiones/{selected_id}/proveedores/{p['id']}/abonos").add(abono_data)
                                    st.success("Pago a√±adido.")
                                    st.cache_data.clear()
                                    st.rerun()

def render_finanzas_tab(db, user_id):
    """Renders the Financial Analysis Tab."""
    excursiones = get_data(user_id, "excursiones")
    if not excursiones:
        st.warning("Primero debes crear una excursi√≥n.")
        return

    excursion_options = {ex['id']: ex['name'] for ex in excursiones}
    selected_id = st.selectbox(
        "Selecciona una excursi√≥n para ver su an√°lisis financiero:",
        options=list(excursion_options.keys()),
        format_func=lambda x: excursion_options[x],
        key="finanzas_select"
    )

    if selected_id:
        excursion = next((ex for ex in excursiones if ex['id'] == selected_id), None)
        clientes = get_data(user_id, "excursiones", excursion_id=selected_id, sub_collection="clientes")
        proveedores = get_data(user_id, "excursiones", excursion_id=selected_id, sub_collection="proveedores")

        # Calculations
        ingresos_recaudados = sum(c['totalAbonado'] for c in clientes)
        costos_pagados = sum(p['totalAbonado'] for p in proveedores)
        costos_totales_contratados = sum(p['valorTotal'] for p in proveedores)
        ingresos_potenciales = excursion['costPerPerson'] * len(clientes)
        ganancia_neta_actual = ingresos_recaudados - costos_pagados
        ganancia_potencial = ingresos_potenciales - costos_totales_contratados

        # Display Metrics
        m1, m2, m3, m4 = st.columns(4)
        m1.metric("Ingresos Recaudados", format_currency(ingresos_recaudados))
        m2.metric("Costos Pagados", format_currency(costos_pagados))
        m3.metric("Ganancia Neta Actual", format_currency(ganancia_neta_actual))
        m4.metric("Ganancia Potencial", format_currency(ganancia_potencial), help="Ganancia si todos los clientes pagan y se pagan todos los costos.")

        st.divider()

        col1, col2 = st.columns([1, 1])

        with col1:
             with st.container(border=True):
                st.subheader("Divisi√≥n de Ganancias (Neta Actual)")
                ganancia_inversionista = ganancia_neta_actual * 0.20 if ganancia_neta_actual > 0 else 0
                tu_ganancia = ganancia_neta_actual * 0.80 if ganancia_neta_actual > 0 else ganancia_neta_actual

                st.markdown(f"**Ganancia Neta Total:** `{format_currency(ganancia_neta_actual)}`")
                st.markdown(f"**20% Inversionista:** `{format_currency(ganancia_inversionista)}`")
                st.markdown(f"**Tu Ganancia (80%):** `{format_currency(tu_ganancia)}`")

             if not st.session_state.is_read_only:
                with st.container(border=True):
                    st.subheader("An√°lisis Financiero con IA")
                    if st.button("Analizar Finanzas ‚ú®"):
                         with st.spinner("Analizando..."):
                            prompt = f"""Analiza la situaci√≥n de la excursi√≥n "{excursion['name']}":
- Ingresos recaudados: {format_currency(ingresos_recaudados)}
- Costos pagados: {format_currency(costos_pagados)}
- Ganancia neta actual: {format_currency(ganancia_neta_actual)}
- Ganancia potencial: {format_currency(ganancia_potencial)}
- Clientes: {len(clientes)}

Proporciona un an√°lisis corto, resalta un punto fuerte, un √°rea de mejora y una recomendaci√≥n."""
                            analysis = call_gemini_api(prompt, "Eres un asesor financiero experto para agencias de viajes en Colombia.")
                            st.info("An√°lisis de la IA:")
                            st.markdown(analysis)


        with col2:
            with st.container(border=True):
                st.subheader("Visualizaci√≥n de Finanzas")
                labels = ['Ingresos Recaudados', 'Costos Pagados', 'Ganancia Neta']
                values = [ingresos_recaudados, costos_pagados, max(0, ganancia_neta_actual)]
                fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3, marker_colors=['#2dd4bf', '#f43f5e', '#38bdf8'])])
                fig.update_layout(showlegend=True)
                st.plotly_chart(fig, use_container_width=True)


# --- Main Application ---
def main():
    """Main function to run the Streamlit app."""
    query_params = st.query_params
    share_id = query_params.get("share_id")

    if share_id:
        st.session_state.is_read_only = True
        try:
            share_doc = db.collection(f"artifacts/{APP_ID}/public/data/shared-apps").document(share_id).get()
            if share_doc.exists:
                st.session_state.owner_user_id = share_doc.to_dict().get("owner")
            else:
                st.error("Enlace para compartir no v√°lido o expirado.")
                st.stop()
        except Exception as e:
            st.error(f"No se pudo verificar el enlace para compartir: {e}")
            st.stop()

    if not st.session_state.logged_in and not st.session_state.is_read_only:
        render_login_page()
        st.stop()

    data_owner_id = st.session_state.owner_user_id

    # --- App Header ---
    if st.session_state.is_read_only:
        st.warning("üëÅÔ∏è Est√°s en modo de solo lectura.", icon="üëÅÔ∏è")

    c1, c2 = st.columns([4, 1])
    with c1:
        st.title("üìä Base de Datos Viajes Isatour")
    with c2:
        if not st.session_state.is_read_only:
            if st.button("Cerrar Sesi√≥n"):
                for key in st.session_state.keys():
                    del st.session_state[key]
                st.rerun()
            if st.button("Compartir ‚ÜóÔ∏è"):
                with st.spinner("Creando enlace..."):
                    share_data = {"owner": data_owner_id, "createdAt": firestore.SERVER_TIMESTAMP}
                    doc_ref = db.collection(f"artifacts/{APP_ID}/public/data/shared-apps").add(share_data)
                    app_url = "https://your-streamlit-app-url.com" # Replace with your deployed app's URL
                    share_url = f"{app_url}?share_id={doc_ref[1].id}"
                    st.text_input("Enlace para compartir (solo lectura):", share_url, key="share_url")


    # --- App Tabs ---
    tab1, tab2, tab3, tab4 = st.tabs([
        "Gestionar Excursiones",
        "Clientes y Abonos",
        "Costos y Proveedores",
        "An√°lisis Financiero"
    ])

    with tab1:
        render_excursiones_tab(db, data_owner_id)
    with tab2:
        render_clientes_tab(db, data_owner_id)
    with tab3:
        render_proveedores_tab(db, data_owner_id)
    with tab4:
        render_finanzas_tab(db, data_owner_id)

if __name__ == "__main__":
    main()